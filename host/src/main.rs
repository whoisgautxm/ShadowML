// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    ZK_DTP_ELF, ZK_DTP_ID
};
use risc0_zkvm::{default_prover,ExecutorEnv,Receipt};
use std::io;

fn main() {
    // Make the prover.
    let prover = default_prover();

    // TODO: Implement communication with the guest here
    println!("Please input the sepal length, sepal width, petal length, petal width.");

    let mut input = String::new();
    io::stdin().read_line(&mut input).unwrap();
    let mut s = input.split_whitespace();



    let env = ExecutorEnv::builder().write(&input).unwrap().build().unwrap();


    let sepal_length: u32 = s.next().unwrap().parse().unwrap(); 
    let sepal_width: u32 = s.next().unwrap().parse().unwrap();
    let petal_length: u32 = s.next().unwrap().parse().unwrap();
    let petal_width :u32 = s.next().unwrap().parse().unwrap();



    // Run prover & generate receipt
    let receipt:Receipt = prover.prove(env, ZK_DTP_ELF).unwrap().receipt;

    // TODO: Implement code for transmitting or serializing the receipt for
    // other parties to verify here

    // Optional: Verify receipt to confirm that recipients will also be able to
    // verify your receipt
    receipt.verify(ZK_DTP_ID);

        // // Extract journal of receipt
        // let c: u32 = from_slice(&receipt.journal).unwrap();

        // let dic = ["setosa", "versicolor", "virginica"];


        // // Print an assertion
        // println!("This is the {} flower, and I can prove it!", dic[c as usize]);
}
